#!/bin/bash

# Get data from local.env file
source local.env


# Colors
GREEN='\033[1;32m' # Green
RESET='\033[0m' # No Color


# CHECK THE PROJECT STATUS

# Default
MODE=install-starter
# 1. Check IP and Create Host *
# 2. Prepare the starter template *
# 3. Build the server *
# 4. Install the NPM packages and build the style.css file *
# 5. Do the WP job *
# 6. Print the site info *
# 7. Print the Username & Pass *
# 8. Run the GULP *


# If there is no theme in the themes folder
if [[ -d wp-content/themes/* ]]; then

	MODE=install-different-theme
	# 1. Check IP and Create Host*
	# 2. Build the server *
	# 3. Do the WP job *
	# 4. Print the site info *
	# 5. Print the Username & Pass *

fi


# If DB dump or MySQL files exist
if [[ -f database/dump/*.sql ]] || [[ -d database/mysql/ ]]; then

	MODE=install-existing-site
	# 1. Check IP and Create Host *
	# 2. Build the server *
	# 3. URL replace on DB !!! Coming soon
	# 4. Print the site info *

fi


# If local IP already changed on .env file
if [[ $IP != 127.0.0.1 ]]; then

	MODE=already-installed
	# 1. Start the servers

	# If forced re-install:
	# 1. Stop and remove the current local server and domain
	# 2. Restart the installation

fi


echo "INSTALLATION MODE: $MODE"
echo ""




# IF ALREADY INSTALLED
if [[ $MODE == already-installed ]]; then

	# Force re-install
	if [[ $1 == --f ]]; then

		# Stop first
		bash stop

		# Restart Installation
		bash install
		exit

	fi


	# Start the server
	bash start
	exit

fi




# CONFIRM THE SITE INFO
# Confirm the environment information if .env file not exists
if [[ ! -f .env ]]; then


	# Get local domain info
	read -ep "Domain Name (${DOMAIN}): " domain
	[[ ! -z "$domain" ]] && DOMAIN=$domain || echo "Using '${DOMAIN}'"


	# If importing existing website
	if [[ $MODE == install-existing-site ]]; then

		# Get local domain info
		read -ep "Old full website URL (${OLD_DOMAIN}): " old_domain
		[[ ! -z "$old_domain" ]] && OLD_DOMAIN=$old_domain || read -ep "Old full website URL (${OLD_DOMAIN}): " old_domain

	fi


	# When creating website from scratch
	if [[ $MODE == install-starter ]] || [[ $MODE == install-different-theme ]]; then


		read -ep "Active theme folder name (${SLUG}): " slug
		[[ ! -z "$slug" ]] && SLUG=$slug || echo "Using '${SLUG}'"


		read -ep "Website Name (${NAME}): " name
		[[ ! -z "$name" ]] && NAME=$name || echo "Using '${NAME}'"


		read -ep "Website Tagline (${DESC}): " desc
		[[ ! -z "$desc" ]] && DESC=$desc || echo "Using '${DESC}'"


	fi


	# When using our starter theme
	if [[ $MODE == install-starter ]]; then


		read -ep "Function Prefixes (${PREFIX}): " prefix
		[[ ! -z "$prefix" ]] && PREFIX=$prefix || echo "Using '${PREFIX}'"


	fi


else


	source .env


fi




# Confirm the information
echo ""
echo ""
echo "== Information Entered ============"
echo ""
echo "Local development domain: $DOMAIN"
[[ $MODE == install-existing-site ]] && echo "Old full website URL: $OLD_DOMAIN" || sleep 0
if [[ $MODE == install-starter ]] || [[ $MODE == install-different-theme ]]; then
	echo "Active theme folder name: $SLUG"
	echo "Website Name: $NAME"
	echo "Website Tagline: $DESC"
fi
[[ $MODE == install-starter ]] && echo "Function Prefixes: $PREFIX" || sleep 0
echo ""
echo "==================================="
echo ""
echo ""
read -ep "Are these correct? (type 'yes' to confirm): " confirm




# CHANGE THE FILE IF YES
if [[ $confirm == yes ]] || [[ $confirm == y ]]; then

	# Create the .env file
	cp local.env .env
	echo -e ".env file created ... ${GREEN}done${RESET}"


	# Update the .env file
	sed -i "" "s/DOMAIN=dev.sitename.com/DOMAIN=$DOMAIN/g" .env;
	sed -i "" "s#https://www.sitename.com#$OLD_DOMAIN#g" .env;
	sed -i "" "s/SLUG=site-name/SLUG=$SLUG/g" .env;
	sed -i "" "s/Site Name/$NAME/g" .env;
	sed -i "" "s/Site tagline/$DESC/g" .env;
	sed -i "" "s/PREFIX=sitename/PREFIX=$PREFIX/g" .env;
	echo -e ".env file updated with the new info ... ${GREEN}done${RESET}"


	# Get data from .env file
	source .env

else

	exit

fi




# CHECK IP AND CREATE HOST
echo "Checking IP availability..."
COUNTER=2
while [[ $COUNTER -lt 99 ]]; do

	IP="127.0.0.${COUNTER}"


	echo "Checking '${IP}' availability..."
	if curl --max-time 3 --output /dev/null --silent --head --fail "${IP}"; then
		echo "${IP} - NOT AVAILABLE" >&2
	else
		echo "${IP} - AVAILABLE" >&2
		break
	fi


	let COUNTER=COUNTER+1

done

# Update the environment file (.env) with the available IP
sed -i "" "s/IP=127.0.0.1/IP=${IP}/g" .env;
echo -e "'${IP}' changed as '${IP}' on .env file ... ${GREEN}done${RESET}"


# Open that IP slot
ifconfig lo0 alias $IP up
echo -e "'${IP}' is now available to build server ... ${GREEN}done${RESET}"




# PREPARE THE STARTER TEMPLATE
if [[ $MODE == install-starter ]]; then


	# Download the template
	git clone https://twelve12com@bitbucket.org/twelve12com/new-wordpress-theme-template.git wp-content/themes/${SLUG}/
	echo -e "Starter theme clonned ... ${GREEN}done${RESET}"


	# Update the permissions
	chmod -R a=rwx wp-content/themes/${SLUG}/
	echo -e "Theme file permissions updated ... ${GREEN}done${RESET}"


	# Theme function prefix changes
	sed -i "" "s/sitename/${PREFIX}/g" wp-content/themes/${SLUG}/functions.php;
	sed -i "" "s/sitename/${PREFIX}/g" wp-content/themes/${SLUG}/header.php;
	echo -e "Function prefixes changed as '${PREFIX}_' ... ${GREEN}done${RESET}"


	# Theme info changes
	sed -i "" "s/Site Name/${NAME}/g" wp-content/themes/${SLUG}/style.scss;
	sed -i "" "s/Site tagline/${DESC}/g" wp-content/themes/${SLUG}/style.scss;
	echo -e "Theme information updated as '${NAME}' ... ${GREEN}done${RESET}"


fi




# BUILD THE SERVER
echo "Server is building..."
docker-compose rm &&
docker-compose pull &&
docker-compose build --no-cache &&
docker-compose up -d --force-recreate


# Add the host to the /etc/hosts file
sudo bash config/etc-hosts.sh -add $DOMAIN $IP
killall -HUP mDNSResponder


# Check MySQL to be ready
while ! docker exec ${PREFIX}_mysql mysqladmin --user=root --password=password --host "${IP}" ping --silent &> /dev/null ; do
	echo "Waiting for database connection..."
	sleep 3
done
echo -e "MySQL is ready! ... ${GREEN}done${RESET}"




# INSTALL NPM PACKAGES AND BUILD THE "style.css" FILE
if [[ $MODE == install-starter ]]; then


	# Install NPM packages
	echo "NPM packages installing..."
	docker-compose run --no-deps --rm gulp npm run-script build
	echo -e "SCSS file built ... ${GREEN}done${RESET}"


fi




# DO THE WP WORKS
if [[ $MODE == install-starter ]] || [[ $MODE == install-different-theme ]]; then


	source wp.sh


fi




# PRINT THE SITE INFO
echo ""
echo ""
echo "== Site Info ===================="
echo ""
echo "Admin Page: http://${DOMAIN}/wp-admin"

if [[ $MODE == install-starter ]] || [[ $MODE == install-different-theme ]]; then

	echo "Username: ${DEVELOPER_USERNAME}"
	echo "${ONLY_PASSWORD}"

fi

echo "IP: ${IP}"
echo ""
echo "================================="
echo ""
echo ""




# If Gulp file and package.json exist in theme folder, run the GULP
if [[ -f wp-content/themes/${SLUG}/gulpfile.js ]] && [[ -f wp-content/themes/${SLUG}/package.json ]]; then


	echo "GULP is running..."
	docker-compose run --rm gulp npm start


fi